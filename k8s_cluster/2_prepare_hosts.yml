- name: prepare host install pkg
  hosts: all
  tasks:
  - name: Creat modules-load.d/k8s.conf
    ansible.builtin.copy:
      dest: "/etc/modules-load.d/k8s.conf"
      content: |
        overlay
        br_netfilter
    become: true
    become_user: root

  - name: change modprobe, swapoff
    ansible.builtin.shell: "{{ item }}"
    become: true
    become_user: root
    loop: [modprobe overlay, modprobe br_netfilter, swapoff -a]

  - name: create directory if they don't exist
    ansible.builtin.file:
      path: "{{ item }}"
      state: directory
      owner: root
      group: root
      mode: 0777
    loop:
      - /opt/cni/bin
      - /etc/containerd
      - $HOME/.kube
      - /opt/local-pv

  - name: Creat sysctl.d/k8s.conf
    ansible.builtin.copy:
      content: |
        net.bridge.bridge-nf-call-iptables = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward = 1
      dest: /etc/sysctl.d/k8s.conf
    loop:
    become: true
    become_user: root

  - name: Creat crictl endpoint
    ansible.builtin.copy:
      content: |
        runtime-endpoint: unix:///var/run/containerd/containerd.sock
        image-endpoint: unix:///var/run/containerd/containerd.sock
        timeout: 10
        debug: true
      dest: /etc/crictl.yaml
    loop:
    become: true
    become_user: root

  - name : Install multiple packages
    ansible.builtin.apt: name={{ item }} state=latest update_cache=true
    loop: [git, wget, vim, apt-transport-https, ca-certificates, software-properties-common, gnupg2, runc]

  - name: Unarchive a container that needs to be downloaded
    ansible.builtin.unarchive:
      src: https://github.com/containerd/containerd/releases/download/v1.7.8/containerd-1.7.8-linux-amd64.tar.gz
      dest: /usr/local
      remote_src: yes

  - name: Unarchive a cni-plugins that needs to be downloaded
    ansible.builtin.unarchive:
      src: https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz
      dest: /opt/cni/bin
      remote_src: yes

  - name: Create the configurations container
    ansible.builtin.shell: "{{ item }}"
    become: true
    become_user: root
    loop: [sysctl --system, containerd config default > /etc/containerd/config.toml, sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml, curl -L https://raw.githubusercontent.com/containerd/containerd/main/containerd.service -o /etc/systemd/system/containerd.service, systemctl daemon-reload, systemctl enable --now containerd]
